[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

# Clogged Toilet Check
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = "if not G.GAME.blind:debuff_hand(G.play.cards, poker_hands, text) then"
position = 'at'
match_indent = true
payload = '''if not G.GAME.blind:debuff_hand(G.play.cards, poker_hands, text) and not (next(poker_hands["Flush"]) and next(find_joker('Clogged Toilet'))) then'''

# Clogged Toilet Mechanic
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''play_area_status_text("Not Allowed!")--localize('k_not_allowed_ex'), true)'''
position = 'at'
match_indent = true
payload = '''if next(poker_hands["Flush"]) and next(find_joker('Clogged Toilet')) then
  -- flush toilet
  ease_background_colour{new_colour = HEX('805d3c'), contrast = 2}
  play_sound('whoosh_long',3,1)
  play_sound('crumpleLong1',3,1)

  -- level up hand
  local hand = find_joker('Clogged Toilet')[1].ability.levelUp
  if hand ~= 'None' then
    update_hand_text({sound = 'button', volume = 0.7, pitch = 0.8, delay = 0.3}, {handname=localize(hand, 'poker_hands'),chips = G.GAME.hands[hand].chips, mult = G.GAME.hands[hand].mult, level=G.GAME.hands[hand].level})
    level_up_hand(find_joker('Clogged Toilet')[1], hand, false, 2)
  end

  play_area_status_text("Flushed!")
else
  play_area_status_text("Not Allowed!")--localize('k_not_allowed_ex'), true)
end'''

# Ban Snake Nest in Fragile Challenge Deck
[[patches]]
[patches.pattern]
target = 'challenges.lua'
pattern = '''id = 'c_fragile_1',
        rules = {
            custom = {
            },
            modifiers = {
            }
        },
        jokers = {
            {id = 'j_oops', eternal = true, edition = 'negative'},
            {id = 'j_oops', eternal = true, edition = 'negative'},
        },
        consumeables = {
        },
        vouchers = {
        },
        deck = {
            cards = {{s='D',r='2',e='m_glass',},{s='D',r='3',e='m_glass',},{s='D',r='4',e='m_glass',},{s='D',r='5',e='m_glass',},{s='D',r='6',e='m_glass',},{s='D',r='7',e='m_glass',},{s='D',r='8',e='m_glass',},{s='D',r='9',e='m_glass',},{s='D',r='T',e='m_glass',},{s='D',r='J',e='m_glass',},{s='D',r='Q',e='m_glass',},{s='D',r='K',e='m_glass',},{s='D',r='A',e='m_glass',},{s='C',r='2',e='m_glass',},{s='C',r='3',e='m_glass',},{s='C',r='4',e='m_glass',},{s='C',r='5',e='m_glass',},{s='C',r='6',e='m_glass',},{s='C',r='7',e='m_glass',},{s='C',r='8',e='m_glass',},{s='C',r='9',e='m_glass',},{s='C',r='T',e='m_glass',},{s='C',r='J',e='m_glass',},{s='C',r='Q',e='m_glass',},{s='C',r='K',e='m_glass',},{s='C',r='A',e='m_glass',},{s='H',r='2',e='m_glass',},{s='H',r='3',e='m_glass',},{s='H',r='4',e='m_glass',},{s='H',r='5',e='m_glass',},{s='H',r='6',e='m_glass',},{s='H',r='7',e='m_glass',},{s='H',r='8',e='m_glass',},{s='H',r='9',e='m_glass',},{s='H',r='T',e='m_glass',},{s='H',r='J',e='m_glass',},{s='H',r='Q',e='m_glass',},{s='H',r='K',e='m_glass',},{s='H',r='A',e='m_glass',},{s='S',r='2',e='m_glass',},{s='S',r='3',e='m_glass',},{s='S',r='4',e='m_glass',},{s='S',r='5',e='m_glass',},{s='S',r='6',e='m_glass',},{s='S',r='7',e='m_glass',},{s='S',r='8',e='m_glass',},{s='S',r='9',e='m_glass',},{s='S',r='T',e='m_glass',},{s='S',r='J',e='m_glass',},{s='S',r='Q',e='m_glass',},{s='S',r='K',e='m_glass',},{s='S',r='A',e='m_glass',},},
            type = 'Challenge Deck'
        },
        restrictions = {
            banned_cards = {'''
position = 'after'
match_indent = true
payload = ''' {id = 'snakenest'},'''

# Extra Card Space in UI if Album Cover is Present
[[patches]]
[patches.pattern]
target = 'functions/UI_definitions.lua'
pattern = 'local _size = G.GAME.pack_size'
position = 'at'
match_indent = true
payload = '''local _size = G.GAME.pack_size + #find_joker('Album Cover')'''

# Extra Card in Packs if Album Cover is Present
[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''G.E_MANAGER:add_event(Event({trigger = 'after', delay = 1.3*math.sqrt(G.SETTINGS.GAMESPEED), blockable = false, blocking = false, func = function()
                local _size = self.ability.extra'''
position = 'at'
match_indent = true
payload = '''G.E_MANAGER:add_event(Event({trigger = 'after', delay = 1.3*math.sqrt(G.SETTINGS.GAMESPEED), blockable = false, blocking = false, func = function()
                local _size = self.ability.extra + #find_joker('Album Cover')'''

# Updating Superstition Talies
[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''end
        self.sell_cost_label = self.facing == 'back' and '?' or self.sell_cost'''
position = 'after'
match_indent = true
payload = '''if self.ability.name == 'Superstition' then
    self.ability.six_tally = 0
    self.ability.seven_tally = 0
    for _, c in pairs(G.playing_cards) do
      if c:get_id() == 6 then self.ability.six_tally = self.ability.six_tally+1 end
      if c:get_id() == 7 then self.ability.seven_tally = self.ability.seven_tally+1 end
    end
    self.ability.Xmult = math.max(1, 1 + 0.25*self.ability.seven_tally - 0.25*self.ability.six_tally)
  end'''

# Hollow Point Mechanic
[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''end
        self.sell_cost_label = self.facing == 'back' and '?' or self.sell_cost'''
position = 'after'
match_indent = true
payload = '''if self.ability.name == 'Hollow Point' then
            self.ability.mult = G.jokers.config.card_limit - #G.jokers.cards + #find_joker('Hollow Point') + #find_joker('Joker Stencil')
        end'''

# Hollow Point Inclusion for Stencil Mechanic
[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''if G.jokers.cards[i].ability.name == 'Joker Stencil' then self.ability.x_mult = self.ability.x_mult + 1 end'''
position = 'after'
match_indent = true
payload = '''if G.jokers.cards[i].ability.name == 'Joker Stencil' or G.jokers.cards[i].ability.name == 'Hollow Point' then self.ability.x_mult = self.ability.x_mult + 1 end'''
